name: Create new cohort

on:
  issues:
    types: labeled

env:
  GH_TOKEN: ${{ secrets.GH_PAT }}

jobs:

  parse_issue:
    if: ${{ github.event.label.name == 'cohort' }}
    name: Parse Issue data
    runs-on: ubuntu-latest
    outputs:
      org: ${{ steps.extract.outputs.org }}
      lesson_repos: ${{ steps.extract.outputs.repos }}
      assignments: ${{ steps.extract.outputs.assignments }}
      instructors: ${{ steps.extract.outputs.instructors }}
      students: ${{ steps.extract.outputs.students }}
    steps:
      - name: Parse issue
        id: parse
        uses: zentered/issue-forms-body-parser@v2.1.1
      - name: Extract relevant fields
        id: extract
        run: |
          echo "org=$(echo $ISSUE_DATA | jq -r '."organization-name".content|.[]')" >> $GITHUB_OUTPUT
          # Using sed to format output as a list of strings
          echo "repos=$(echo $ISSUE_DATA | jq -c '."lesson-repos".content' | sed -e 's/\\r\\n/ /g' -e 's/[^[:alnum:] _.-]//g')" >> $GITHUB_OUTPUT
          echo "assignments=$(echo $ISSUE_DATA | jq -c '."list-of-assignments".content' | sed -e 's/\\r\\n/ /g' -e 's/[^[:alnum:] _.-]//g')" >> $GITHUB_OUTPUT
          echo "instructors=$(echo $ISSUE_DATA | jq -c '."list-of-instructors".content' | sed -e 's/\\r\\n/ /g' -e 's/[^[:alnum:] _.-]//g')" >> $GITHUB_OUTPUT
          echo "students=$(echo $ISSUE_DATA | jq -c '."list-of-students".content' | sed -e 's/\\r\\n/ /g' -e 's/[^[:alnum:] _.-]//g')" >> $GITHUB_OUTPUT
        env:
          ISSUE_DATA: ${{ steps.parse.outputs.data }}
      - name: Show output
        run: |
          echo ${{ toJson(steps.parse.outputs.data) }} >> "parse_data.json"
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: parse-data
          path: parse_data.json

  invite_members:
    name: Invite students and instructors to org
    needs: parse_issue
    runs-on: ubuntu-latest
    env:
      ORG: ${{ needs.parse_issue.outputs.org }}
    steps:
      - name: Create Students team
        continue-on-error: true # if the team already exists, this will fail
        run: |
          gh api -X POST /orgs/${{ env.ORG }}/teams \
          --input <(echo '{"name": "Students", "description": "Students in this cohort", "privacy": "closed"}')
      - name: Invite instructors to Students team as maintainer # this should also invite them to the org
        if: ${{ !contains(needs.parse_issue.outputs.instructors, 'No response') }}
        continue-on-error: true # continue even if some invitiations fail
        run: |
          for instructor in $(echo ${{ needs.parse_issue.outputs.instructors }}); do
            gh api -X PUT /orgs/${{ env.ORG }}/teams/Students/memberships/${instructor} \
            --input <(echo '{"role": "maintainer"}')
          done
      - name: Invite students to Students team as member # this should also invite them to the org
        if: ${{ !contains(needs.parse_issue.outputs.students, 'No response') }}
        continue-on-error: true # continue even if some invitiations fail
        run: |
          for student in $(echo ${{ needs.parse_issue.outputs.students }}); do
            gh api -X PUT /orgs/${{ env.ORG }}/teams/Students/memberships/${student} \
            --input <(echo '{"role": "member"}')
          done

  create_repos:
    name: Fork lesson repos
    needs: [parse_issue]
    runs-on: ubuntu-latest
    env:
      ORG: ${{ needs.parse_issue.outputs.org }}
    steps:
      - name: Fork lesson repos
        if: needs.parse_issue.outputs.lesson_repos != '*No response*'
        run: |
          for repo in $(echo ${{ needs.parse_issue.outputs.lesson_repos }}); do
            gh repo fork ${{ github.repository_owner }}/${repo} --org ${{ env.ORG }}
          done

      - name: Enable all GitHub Actions for lesson repos
        if: needs.parse_issue.outputs.lesson_repos != '*No response*'
        run: |
          for repo in $(echo ${{ needs.parse_issue.outputs.lesson_repos }}); do
            gh api -X PUT /repos/${{ env.ORG }}/${repo}/actions/permissions \
            --input <(echo '{"enabled": true}')
          done

      - name: Fork assignment repos
        if: needs.parse_issue.outputs.assignments != '*No response*'
        run: |
          for assignment in $(echo ${{ needs.parse_issue.outputs.assignments }}); do
            gh repo fork ${{ github.repository_owner }}/${assignment} --org ${{ env.ORG }}
          done

      - name: Create Discussions repo
        run: |
          gh api -X POST /orgs/${{ env.ORG }}/repos \
          --input <(echo '{"name": "Discussions", "description": "Discussion forum for this cohort",
            "private": true, "has_discussions": true}')
